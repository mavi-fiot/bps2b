# === crypto/signature.py ===
# –ü—ñ–¥–ø–∏—Å —Ö–µ—à—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—Ä–∏–≤–∏—Ö –ï–¥–≤–∞—Ä–¥—Å–∞ (Ed25519)

from ecpy.curves import Curve, Point

# –í–∏–±—ñ—Ä –∫—Ä–∏–≤–æ—ó Ed25519 (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –î–°–¢–£ 9041)
curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order

# –ü—ñ–¥–ø–∏—Å —Ö–µ—à—É (—è–∫ —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è): –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ç–æ—á–∫–∞ –Ω–∞ –∫—Ä–∏–≤—ñ–π

# def sign_hash(hash_scalar: int, private_key: int) -> Point:
#     return hash_scalar * (private_key * G)
# def sign_hash(hash_scalar: int, private_key: int) -> Point:
#     public_key = private_key * G
#     print(f"–ó–Ω–∞—á–µ–Ω–Ω—è G: {G}")
#     print(f"  –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: ({public_key.x}, {public_key.y})")
#     print(f"  –•–µ—à (—Å–∫–∞–ª—è—Ä): {hash_scalar}")
#     signed_point = hash_scalar * public_key
#     print(f"  –ü—ñ–¥–ø–∏—Å (—Ç–æ—á–∫–∞): ({signed_point.x}, {signed_point.y})")
#     return signed_point
def sign_hash(hash_scalar: int, private_key: int) -> Point:
    public_key = private_key * G
    signed_point = hash_scalar * public_key

    # üîç –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    try:
        _ = Point(signed_point.x, signed_point.y, curve)
        print("+ –ü—ñ–¥–ø–∏—Å ‚Äî —Ç–æ—á–∫–∞ –Ω–∞ –∫—Ä–∏–≤—ñ–π")
    except Exception:
        print("—Ö –ü—ñ–¥–ø–∏—Å ‚Äî –Ω–µ —Ç–æ—á–∫–∞ –Ω–∞ –∫—Ä–∏–≤—ñ–π!")

    return signed_point


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É –∑–∞ –ø—É–±–ª—ñ—á–Ω–∏–º –∫–ª—é—á–µ–º

# def verify_signature(hash_scalar: int, signature: Point, public_key: Point) -> bool:
#     expected = hash_scalar * public_key
#     print(f"–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—á–∫–∏ (–∫–æ–Ω—Ç—Ä–æ–ª—å)): ({expected.x}, {expected.y})")

def verify_signature(hash_scalar: int, signature: Point, public_key: Point) -> bool:
    expected = hash_scalar * public_key
    print(f"\n _________–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:")
    print(f"  –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: ({public_key.x}, {public_key.y})")
    print(f"  –•–µ—à: {hash_scalar}")
    print(f"  –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç–æ—á–∫–∞: ({expected.x}, {expected.y})")
    print(f"  –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—á–∫–∏ (–∫–æ–Ω—Ç—Ä–æ–ª—å)): ({expected.x}, {expected.y})")
    print(f"  –ü—ñ–¥–ø–∏—Å: ({signature.x}, {signature.y})")
    return signature == expected


if __name__ == "__main__":
    import secrets

    voter_id = "dv1"
    ballot_text = "–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ 2024 —Ä—ñ–∫"
    personalized = ballot_text + voter_id

    def hash_ballot(text: str) -> int:
        from hashlib import sha3_256
        digest = sha3_256(text.encode("utf-8")).digest()
        return int.from_bytes(digest, byteorder="big") % q

    priv = secrets.randbelow(q)
    pub = priv * G
    hash_scalar = hash_ballot(personalized)

    signature = sign_hash(hash_scalar, priv)
    print(f"\n+ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å—É:")
    if verify_signature(hash_scalar, signature, pub):
        print("+ –ü—ñ–¥–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
    else:
        print("—Ö –ü—ñ–¥–ø–∏—Å –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ò–ô")
