# app/demo_crypto.py 

from fastapi import APIRouter
from ecpy.curves import Curve, Point
from pydantic import BaseModel
import secrets

from crypto.hash_util import hash_ballot, hash_to_point
from crypto.encryption import elgamal_encrypt_point, decrypt_ciphertext
from kzp.crypto_logic import get_server_keys, get_secretary_keys

router = APIRouter(prefix="/demo", tags=["Crypto Demo"])

curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order

# üì• –í—Ö—ñ–¥–Ω–∞ –º–æ–¥–µ–ª—å
class DemoEncryptRequest(BaseModel):
    voter_id: str = "demo-voter"
    choice: str = "–ó–∞"
    decision_text: str = "–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä—ñ—á–Ω–∏–π –∑–≤—ñ—Ç –¢–æ–≤–∞—Ä–∏—Å—Ç–≤–∞ –∑–∞ 2024 —Ä—ñ–∫"

# –ö–ª–∞—Å–∏—á–Ω–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ (—Å–µ—Ä–≤–µ—Ä ‚Üí —Å–µ–∫—Ä–µ—Ç–∞—Ä)
@router.post("/encrypt_step", summary="–•–µ—à ‚Üí –¢–æ—á–∫–∞ ‚Üí –ü–æ–¥–≤—ñ–π–Ω–µ ElGamal")
def encrypt_step(data: DemoEncryptRequest):
    server_priv, server_pub = get_server_keys()
    secretary_priv, secretary_pub = get_secretary_keys()
    voter_priv = secrets.randbelow(q)
    voter_pub = voter_priv * G

    ballot_text = f"–ó –ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º —Ä—ñ—à–µ–Ω–Ω—è: {data.decision_text} - –≥–æ–ª–æ—Å—É—é {data.choice}"
    hash_scalar = hash_ballot(ballot_text + data.voter_id)
    point_M = hash_scalar * G

    # –°–ø–æ—á–∞—Ç–∫—É —à–∏—Ñ—Ä—É—î —Ç–æ—á–∫—É M –∫–ª—é—á–æ–º —Å–µ—Ä–≤–µ—Ä—É
    C1_srv, C2_srv = elgamal_encrypt_point(point_M, server_pub)

    # –ü–æ—Ç—ñ–º —à–∏—Ñ—Ä—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç C2_srv –∫–ª—é—á–æ–º —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
    C1_sec, C2_sec = elgamal_encrypt_point(C2_srv, secretary_pub)

    # –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    decrypted_after_sec = decrypt_ciphertext(C1_sec, C2_sec, secretary_priv)
    decrypted_after_srv = decrypt_ciphertext(C1_srv, decrypted_after_sec, server_priv)

    match = decrypted_after_srv == point_M

    return {
    "voter": {
        "private": str(voter_priv),
        "public": {"x": str(voter_pub.x), "y": str(voter_pub.y)}
    },
    "server_pub": {"x": str(server_pub.x), "y": str(server_pub.y)},
    "secretary_pub": {"x": str(secretary_pub.x), "y": str(secretary_pub.y)},
    "ballot_text": ballot_text,
    "hash_scalar": str(hash_scalar),
    "point_M": {"x": str(point_M.x), "y": str(point_M.y)},
    "C1_srv": {"x": str(C1_srv.x), "y": str(C1_srv.y)},
    "C2_srv": {"x": str(C2_srv.x), "y": str(C2_srv.y)},
    "C1_sec": {"x": str(C1_sec.x), "y": str(C1_sec.y)},
    "C2_sec": {"x": str(C2_sec.x), "y": str(C2_sec.y)},
    "decrypted_point": {"x": str(decrypted_after_srv.x), "y": str(decrypted_after_srv.y)},
    "match_original": match,
    "server_keys": {
        "private": str(server_priv),
        "public": {"x": str(server_pub.x), "y": str(server_pub.y)}
    },
    "secretary_keys": {
        "private": str(secretary_priv),
        "public": {"x": str(secretary_pub.x), "y": str(secretary_pub.y)}
    },
}


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –Ω–µ–∑–∞–ª–µ–∂–Ω–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
class EncryptStepRequest(BaseModel):
    voter_id: str
    choice: str
    decision_text: str

@router.post("/encrypt_step_alt", summary="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Üí –¢–æ—á–∫–∞ ‚Üí –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ ElGamal")
def encrypt_step_alt(data: EncryptStepRequest):
    server_priv = secrets.randbelow(q)
    server_pub = server_priv * G

    secretary_priv = secrets.randbelow(q)
    secretary_pub = secretary_priv * G

    voter_priv = secrets.randbelow(q)
    voter_pub = voter_priv * G

    message = f"{data.decision_text} - –≥–æ–ª–æ—Å—É—é {data.choice} (ID: {data.voter_id})"
    point_M = hash_to_point(message)

    # –í—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ –∫–ª—é—á–∞–º–∏ —Å–µ—Ä–≤–µ—Ä—É —Ç–∞ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ —à–∏—Ñ—Ä—É—î—Ç—å—Å—è —Ç–æ—á–∫–∞ M
    C1_srv, C2_srv = elgamal_encrypt_point(point_M, server_pub)
    C1_sec, C2_sec = elgamal_encrypt_point(point_M, secretary_pub)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–∂–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
    decrypted_srv = decrypt_ciphertext(C1_srv, C2_srv, server_priv)
    decrypted_sec = decrypt_ciphertext(C1_sec, C2_sec, secretary_priv)

    return {
    "server_keys": {
        "private": str(server_priv),
        "public": {
            "x": str(server_pub.x),
            "y": str(server_pub.y)
        }
    },
    "secretary_keys": {
        "private": str(secretary_priv),
        "public": {
            "x": str(secretary_pub.x),
            "y": str(secretary_pub.y)
        }
    },
    "voter_keys": {
        "private": str(voter_priv),
        "public": {
            "x": str(voter_pub.x),
            "y": str(voter_pub.y)
        }
    },
    "message": message,
    "hash_point": {
        "x": str(point_M.x),
        "y": str(point_M.y)
    },
    "elgamal_server": {
        "C1": {"x": str(C1_srv.x), "y": str(C1_srv.y)},
        "C2": {"x": str(C2_srv.x), "y": str(C2_srv.y)},
        "decrypted": {"x": str(decrypted_srv.x), "y": str(decrypted_srv.y)},
        "match": decrypted_srv == point_M
    },
    "elgamal_secretary": {
        "C1": {"x": str(C1_sec.x), "y": str(C1_sec.y)},
        "C2": {"x": str(C2_sec.x), "y": str(C2_sec.y)},
        "decrypted": {"x": str(decrypted_sec.x), "y": str(decrypted_sec.y)},
        "match": decrypted_sec == point_M
    }
}

